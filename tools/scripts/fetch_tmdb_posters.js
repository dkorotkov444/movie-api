#!/usr/bin/env node
/*
 * tools/fetch_tmdb_posters.js
 *
 * Scans `tools/movies.js` for movie titles and release years, queries TheMovieDB
 * (TMDB) search API once per movie to obtain poster_path, builds a full image URL
 * and writes results to `tools/movies-with-posters.json`.
 *
 * Usage:
 *   TMDB_API_KEY=your_key node tools/fetch_tmdb_posters.js
 *
 * Notes:
 * - This script does NOT modify `tools/movies.js`. It creates a new file with
 *   poster URLs so the original data remains untouched.
 * - It uses global fetch if available (Node 18+). If your node does not supply
 *   fetch, install node-fetch: `npm install node-fetch` and re-run.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const TMDB_KEY = process.env.TMDB_API_KEY;
if (!TMDB_KEY) {
  console.error('Error: TMDB_API_KEY not set. Export it and re-run:');
  console.error('  TMDB_API_KEY=your_key node tools/fetch_tmdb_posters.js');
  process.exit(1);
}

// Prefer global fetch (Node 18+). Fallback to node-fetch if available.
let fetchFn = globalThis.fetch;
if (!fetchFn) {
  try {
    const nodeFetch = await import('node-fetch');
    fetchFn = nodeFetch.default || nodeFetch;
  } catch (e) {
    console.error('No global fetch and node-fetch is not installed.');
    console.error('Install node-fetch or use Node 18+: npm install node-fetch');
    process.exit(1);
  }
}

// Read fixtures from project data folder and write poster outputs next to fixtures
const moviesFile = path.join(__dirname, '..', 'data', 'fixtures', 'movies2.js');
const outFile = path.join(__dirname, '..', 'data', 'fixtures', 'movies-with-posters.json');

const text = fs.readFileSync(moviesFile, 'utf8');

// Very small parser: find movie blocks and extract title and release_year
// Older versions used numeric `movieid`; this parser uses title+release_year so
// it works with `movies2.js` that doesn't include movieid.
const movieRegex = /\{[\s\S]*?title\s*:\s*'([^']*)'[\s\S]*?release_year\s*:\s*(\d{4})/g;

const movies = [];
let m;
while ((m = movieRegex.exec(text)) !== null) {
  const title = m[1].trim();
  const year = Number(m[2]);
  movies.push({ title, year });
}

if (!movies.length) {
  console.error('No movies found by parser. The script expects the movie objects to contain title and release_year.');
  process.exit(1);
}

console.log(`Found ${movies.length} movies. Querying TMDB (one request per movie)...`);

async function queryTmdb(movie) {
  const q = encodeURIComponent(movie.title);
  const url = `https://api.themoviedb.org/3/search/movie?api_key=${TMDB_KEY}&query=${q}&year=${movie.year}`;
  try {
    const res = await fetchFn(url);
    if (!res.ok) {
      console.warn(`TMDB search failed for ${movie.title} (${movie.year}): ${res.status}`);
      return null;
    }
    const data = await res.json();
    if (data && Array.isArray(data.results) && data.results.length) {
      const best = data.results[0];
      if (best.poster_path) {
        const poster = `https://image.tmdb.org/t/p/w500${best.poster_path}`;
        return { title: movie.title, year: movie.year, poster };
      }
      return { title: movie.title, year: movie.year, poster: null };
    }
    return { title: movie.title, year: movie.year, poster: null };
  } catch (err) {
    console.error('Query error for', movie.title, err.message);
    return null;
  }
}

(async () => {
  const results = [];
  for (const movie of movies) {
    process.stdout.write(`Searching: ${movie.title} (${movie.year})... `);
    // wait between requests to be polite (sleep 250ms)
    // simple rate-limit
    // eslint-disable-next-line no-await-in-loop
    const r = await queryTmdb(movie);
    if (r && r.poster) {
      console.log('found');
      results.push(r);
    } else if (r) {
      console.log('no poster');
      results.push(r);
    } else {
      console.log('error');
    }
    // small pause
    // eslint-disable-next-line no-await-in-loop
    await new Promise((res) => setTimeout(res, 250));
  }

  fs.writeFileSync(outFile, JSON.stringify(results, null, 2), 'utf8');
  console.log(`Wrote ${results.length} entries to ${outFile}`);

  // Also write a JS module that contains the same data and a TMDb attribution (in data/fixtures)
  const outFileJs = path.join(__dirname, '..', 'data', 'fixtures', 'movies-with-posters.js');
  const tmdbHeader = `/*\n * data/fixtures/movies-with-posters.js\n * Poster images provided by The Movie Database (TMDb).\n * This product uses the TMDb API but is not endorsed or certified by TMDb.\n * Please follow TMDb attribution and branding guidelines: https://www.themoviedb.org/documentation/api/terms-of-use\n * Generated by tools/fetch_tmdb_posters.js\n * (c) 2025 Dmitri Korotkov\n */\n\n`;
  const jsContent = tmdbHeader + 'export default ' + JSON.stringify(results, null, 2) + ';\n';
  fs.writeFileSync(outFileJs, jsContent, 'utf8');
  console.log(`Wrote JS module with attribution to ${outFileJs}`);
})();
